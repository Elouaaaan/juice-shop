name: Security pipeline

on:
  push:
    branches: [ "master" ]
  pull_request:

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      node-version: 18
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use Node.js ${{ steps.set-node.outputs.node-version }}
        id: set-node
        run: echo "18" > node-version.txt

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
        working-directory: ./

  sca:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Install deps
        run: npm ci
        working-directory: ./

      - name: npm audit (SCA - baseline)
        id: npm-audit
        run: |
          mkdir -p reports
          npm audit --json > reports/npm-audit.json || true
          echo "npm audit written to reports/npm-audit.json"

      - name: Snyk test (optional, requires SNYK_TOKEN secret)
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          mkdir -p reports
          npm install -g snyk
          snyk auth "${SNYK_TOKEN}"
          snyk test --json > reports/snyk-report.json || true
          echo "snyk report written to reports/snyk-report.json"

      - name: Upload SCA artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sca-reports
          path: reports

  sast:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install deps
        run: npm ci
        working-directory: ./

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript
      - name: Run CodeQL database creation and analysis
        uses: github/codeql-action/analyze@v2

      - name: Run Semgrep (optional - fast rules)
        uses: returntocorp/semgrep-action@v1
        with:
          args: --config auto --json --output semgrep.json --sarif --output-file semgrep.sarif
      - name: Collect SAST reports
        run: |
          mkdir -p reports
          # CodeQL SARIF is uploaded automatically to code scanning; but we also try to capture local sarif if present
          if [ -f semgrep.sarif ]; then mv semgrep.sarif reports/ || true; fi
          if [ -f semgrep.json ]; then mv semgrep.json reports/ || true; fi
          # If CodeQL produced a sarif in the workspace (sometimes available), copy it
          find . -type f -name "*.sarif" -maxdepth 3 -print -exec cp {} reports/ \; || true
          ls -la reports || true

      - name: Upload SAST artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sast-reports
          path: reports

  secret-scanning:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install gitleaks
        run: |
          curl -sSL https://raw.githubusercontent.com/zricethezav/gitleaks/master/install.sh | bash -s -- -b /usr/local/bin v8.17.0 || true
          mkdir -p reports

      - name: Run gitleaks scan
        run: |
          gitleaks detect --source=. --report-format=json --report-path=reports/gitleaks-report.json || true
          ls -la reports || true

      - name: Upload secret-scan artifacts
        uses: actions/upload-artifact@v4
        with:
          name: secret-reports
          path: reports