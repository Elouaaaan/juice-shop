name: Security CI
on:
  push:
    branches: [ "master" ]
  pull_request:

permissions:
  contents: read

jobs:
  sca-snyk:
    name: SCA - Snyk
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install dependencies (generate lockfile)
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --json-file-output=snyk-report.json --sarif-file-output=snyk.sarif --all-projects
        continue-on-error: true

      - name: Upload Snyk JSON report
        uses: actions/upload-artifact@v4
        with:
          name: snyk-report-json
          path: snyk-report.json

      - name: Upload Snyk SARIF report
        uses: actions/upload-artifact@v4
        with:
          name: snyk-report-sarif
          path: snyk.sarif

  sast-semgrep:
    name: SAST — Semgrep
    runs-on: ubuntu-latest

    container:
      image: semgrep/semgrep

    if: (github.actor != 'dependabot[bot]')

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - run: semgrep ci --sarif > semgrep.sarif
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

      - name: Upload Semgrep SARIF report
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-report-sarif
          path: semgrep.sarif


  secrets-gitleaks:
    name: Secret Scanning — Gitleaks (docker)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Gitleaks (docker) and write report into workspace
        run: |
          docker run --rm -v "${{ github.workspace }}:/repo" zricethezav/gitleaks:latest \
            detect --source /repo --report-format json --report-path /repo/gitleaks-report.json || true
            
      - name: Upload Gitleaks report
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report.json
          path: gitleaks-report.json
        
  dast:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Installer Docker Compose plugin
        run: |
          if ! docker compose version >/dev/null 2>&1; then
            sudo apt-get update
            sudo apt-get install -y docker-compose-plugin
          fi
          docker compose version

      # 1) Cloner DVWA
      - name: Cloner DVWA
        run: |
          git clone https://github.com/digininja/DVWA.git
          ls -la DVWA

      # 2) Démarrer DVWA
      - name: Démarrer DVWA (Docker Compose)
        working-directory: DVWA
        run: |
          docker compose up -d
          docker compose ps
          docker ps

      # 3) Détecter automatiquement le port hôte mappé sur 80/tcp
      - name: Détecter le port DVWA
        id: dvwa_port
        working-directory: DVWA
        run: |
          PORT=$(docker compose port dvwa 80 | awk -F: '{print $2}')
          if [ -z "$PORT" ]; then
            CID=$(docker ps -q --filter "name=dvwa")
            PORT=$(docker port "$CID" 80/tcp | awk -F: '{print $2}')
          fi
          echo "Port détecté: ${PORT:-80}"
          echo "target=http://127.0.0.1:${PORT:-80}" >> "$GITHUB_OUTPUT"

      # 4) Attendre que DVWA réponde (HTTP 200/301/302)
      - name: Attendre disponibilité DVWA
        run: |
          TARGET="${{ steps.dvwa_port.outputs.target }}"
          echo "Target: $TARGET"
          for i in {1..40}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" "$TARGET" || echo "000")
            echo "Tentative $i -> HTTP $code"
            if [ "$code" = "200" ] || [ "$code" = "301" ] || [ "$code" = "302" ]; then
              echo "✅ DVWA est disponible"
              exit 0
            fi
            sleep 3
          done
          echo "❌ DVWA indisponible"
          docker compose -f DVWA/docker-compose.yml ps || true
          docker ps -a || true
          exit 1

      # 5) Scan DAST ZAP (baseline)
      - name: Lancer OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.14.0
        with:
          target: "${{ steps.dvwa_port.outputs.target }}"
          cmd_options: "-a -d"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 6) Nettoyage
      - name: Arrêt des conteneurs
        if: always()
        working-directory: DVWA
        run: docker compose down




