name: Security CI
on:
  push:
    branches: [ "master" ]
  pull_request:

permissions:
  contents: read

jobs:
  sca-snyk:
    name: SCA - Snyk
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install dependencies (generate lockfile)
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --json-file-output=snyk-report.json --sarif-file-output=snyk.sarif --all-projects
        continue-on-error: true

      - name: Upload Snyk SARIF to GitHub
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: snyk.sarif


  sast-codeql:
    name: Analyze (${{ matrix.language }})
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    permissions:
      security-events: write
      packages: read
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
        - language: actions
          build-mode: none
        - language: javascript-typescript
          build-mode: none
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        build-mode: ${{ matrix.build-mode }}

    - if: matrix.build-mode == 'manual'
      shell: bash
      run: |
        echo 'If you are using a "manual" build mode for one or more of the' \
          'languages you are analyzing, replace this with the commands to build' \
          'your code, for example:'
        echo '  make bootstrap'
        echo '  make release'
        exit 1

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

        
  secrets-gitleaks:
    name: Secret Scanning â€” Gitleaks (docker)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Gitleaks (docker) and write report into workspace
        run: |
          docker run --rm -v "${{ github.workspace }}:/repo" zricethezav/gitleaks:latest \
            detect --source /repo --report-format json --report-path /repo/gitleaks-report.json || true
            
      - name: Upload Gitleaks report
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report.json
          path: gitleaks-report.json

  dast-zap:
    name: DAST - OWASP ZAP
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install dependencies (generate lockfile)
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Start application
        run: npm start &

      - name: Run ZAP Baseline (JSON output)
        uses: zaproxy/action-baseline@v0.14.0
        with:
          target: "http://localhost:3000"
          token: ${{ secrets.GITHUB_TOKEN }}
          fail_action: false
          cmd_options: "-J dast_report.json"

      - name: Upload ZAP JSON report
        uses: actions/upload-artifact@v4
        with:
          name: dast_report_json
          path: dast_report.json



