name: Security CI
on:
  push:
    branches: [ "master" ]
  pull_request:

permissions:
  contents: read
  security-events: write

jobs:
  sca-snyk:
    name: SCA - Snyk
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install dependencies (generate lockfile)
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --json-file-output=snyk-report.json --sarif-file-output=snyk.sarif --all-projects
        continue-on-error: true

      - name: Debug list files
        run: ls -la

      - name: Upload Snyk JSON report
        uses: actions/upload-artifact@v4
        with:
          name: snyk-report-json
          path: snyk-report.json

      - name: Upload Snyk SARIF report
        uses: actions/upload-artifact@v4
        with:
          name: snyk-report-sarif
          path: snyk.sarif

  sast-codeql:
    name: SAST — CodeQL (JavaScript)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo (full)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Autobuild (CodeQL)
        uses: github/codeql-action/autobuild@v2

      - name: Run CodeQL analysis
        uses: github/codeql-action/analyze@v2

  secrets-gitleaks:
    name: Secret Scanning — Gitleaks (docker)
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout repo (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Debug before scan
        run: ls -la

      - name: Run Gitleaks (docker) and write report into workspace
        run: |
          docker run --rm -v "${{ github.workspace }}:/repo" zricethezav/gitleaks:latest \
            detect --source /repo --report-format json --report-path /repo/gitleaks-report.json || true

      - name: Debug after scan
        run: ls -la

      - name: Upload Gitleaks report
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report
          path: gitleaks-report.json

